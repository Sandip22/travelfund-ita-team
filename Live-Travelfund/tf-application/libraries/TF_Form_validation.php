<?phpif (!defined("BASEPATH"))     exit("No direct script access allowed");/** * Extend the core library for extra validation methods * @author asavaliya-itaction */class TF_Form_validation extends CI_Form_validation{    /**     *  This function helps to set custom error messge;     */    function set_error($field, $error_msg = '')    {        $this->_field_data[$field]['error'] = $error_msg;    }    /**     * Check validity of date.     */    public function validate_date($str)    {        if($_POST['birth_date_dd']=="" || $_POST['birth_date_mm']=="" || $_POST['birth_date_yyyy']=="")        {            return false;        }        //prepare birth date from formate.        $str = $_POST['birth_date_dd'] . '-' . $_POST['birth_date_mm'] . '-' . $_POST['birth_date_yyyy'];                    $parsed = date_parse_from_format("d-m-Y", $str);        if (checkdate($parsed['month'], $parsed['day'], $parsed['year']))        {            return true;        }        else        {            return false;        }    }    /**     * This function check value to be unique in case of edit of record     * CI's is unique function throw error in edit case for same record which it found in db.     */    function edit_is_unique($str, $field)    {        list($table, $field) = explode('.', $field);        //Condition.        $aWh = array(            $field => $str,            'id !=' => $_POST['id']        );        $query = $this->CI->db->get_where($table, $aWh);        //return.        return $query->num_rows() === 0;    }        /**     * This function perform valid name having allow Hyphens & Apostrophes & No number     */    function valid_name($str)    {        preg_match_all('!\d+!', $str, $matches);        //having numerica value inside        if(count($matches[0])>0)         {            return false;        }        else {            return true;        }                            //it rejects everything except letters, periods, apostrophes, spaces and hyphens.        if(!preg_match("/^[a-zA-Z'. -]+$/",$str))        {            return true;         }         else{             return false;         }    }    /**     * letter & number     * Max length will be 50 characters.     * No space & Apostrophes -      */    function valid_house_number($str)    {         //No space & Apostrophes -         if(strpos($str, "'") !== FALSE)        {            return false;         }             }        /**     * valid post code     */    function valid_post_code($str)    {                if($this->postcode_check($str)=== FALSE)        {log_message("error",print_r('true',TRUE));                                    return false;        }        else        {log_message("error",print_r('false',TRUE));                                                 return true;        }                //$str=str_replace(" ","",$str);        //allow space        /*        if(!preg_match("/[A-Z]{1,2}[0-9][0-9A-Z]?\s?[0-9][A-Z]{2}/gi",$str))        {log_message("error",print_r('False',TRUE));                        return false;         }         else{             return true;log_message("error",print_r('True',TRUE));                                  }         * */             }    /**     * valid number     * Allow number with dot     */    function valid_number($str)    {        //allow dot        if(!preg_match("/^[0-9.]*$/",$str))        {            return false;         }         else{             return true;         }    }        /**     * Valid Password     * 1) Must be between 6 and 20 characters in length        2) Must contain at least one upper-case letter -        3) Must contain at least one lower-case letter -        4) Must contain at least one number -     */    public function valid_password($str)    {            //$special = '!@#$%*-_=+.';            //return (preg_match('/^(?=^.{6,99}$)(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*['.$special.'])(?!.*?(.)\1{1,})^.*$/', $str)) ? TRUE : FALSE;            if(!preg_match('/^(?=^.{6,20}$)(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])^.*$/', $str))            {                return false;            }                    else            {                return true;            }                        }        /**     * Valid alpha numeric with space     * @return boolean     */    public function valid_alphanumeric_with_space($str)    {            if(!preg_match('/^[a-zA-Z0-9_ ]*$/', $str))            {                return false;            }                    else            {                return true;            }                        }            function caseinses_matches($c_email){                $str  = $_POST['email'];                //Incase sensetive comparision         if (strcasecmp($str, $c_email) == 0) {           return TRUE;        }else{           //Display error           return FALSE;         }            }    /**     * Case insentive function     * @return str     */    public function valid_case_insensitive_email($str){        $str = strtolower($str);        $str = trim($str);        log_message("error",print_r($str,TRUE));                return $this->valid_email($str);    }        /**     * Post code validtion - apply function on 6th June     * @param Nirav     * @return boolean     */    public function postcode_check($toCheck)    {                    // Permitted letters depend upon their position in the postcode.            $alpha1 = "[abcdefghijklmnoprstuwyz]";                          // Character 1            $alpha2 = "[abcdefghklmnopqrstuvwxy]";                          // Character 2            $alpha3 = "[abcdefghjkstuw]";                                   // Character 3            $alpha4 = "[abehmnprvwxy]";                                     // Character 4            $alpha5 = "[abdefghjlnpqrstuwxyz]";                             // Character 5            // Expression for postcodes: AN NAA, ANN NAA, AAN NAA, and AANN NAA with a space            // Or AN, ANN, AAN, AANN with no whitespace            $pcexp[0] = '^(' . $alpha1 . '{1}' . $alpha2 . '{0,1}[0-9]{1,2})([[:space:]]{0,})([0-9]{1}' . $alpha5 . '{2})?$';            // Expression for postcodes: ANA NAA            // Or ANA with no whitespace            $pcexp[1] = '^(' . $alpha1 . '{1}[0-9]{1}' . $alpha3 . '{1})([[:space:]]{0,})([0-9]{1}' . $alpha5 . '{2})?$';            // Expression for postcodes: AANA NAA            // Or AANA With no whitespace            $pcexp[2] = '^(' . $alpha1 . '{1}' . $alpha2 . '[0-9]{1}' . $alpha4 . ')([[:space:]]{0,})([0-9]{1}' . $alpha5 . '{2})?$';            // Exception for the special postcode GIR 0AA            // Or just GIR            $pcexp[3] = '^(gir)([[:space:]]{0,})?(0aa)?$';            // Standard BFPO numbers            $pcexp[4] = '^(bfpo)([[:space:]]{0,})([0-9]{1,4})$';            // c/o BFPO numbers            $pcexp[5] = '^(bfpo)([[:space:]]{0,})(c\/o([[:space:]]{0,})[0-9]{1,3})$';            // Overseas Territories            $pcexp[6] = '^([a-z]{4})([[:space:]]{0,})(1zz)$';            // Anquilla            $pcexp[7] = '^(ai\-2640)$';            // Load up the string to check, converting into lowercase            $postcode = strtolower($toCheck);            // Assume we are not going to find a valid postcode            $valid = false;            // Check the string against the six types of postcodes            foreach ($pcexp as $regexp) {              if (preg_match('/' . $regexp . '/i', $postcode, $matches)) {                // Load new postcode back into the form element                $postcode = strtoupper($matches[1]);                if (isset($matches[3])) {                  $postcode .= ' ' . strtoupper($matches[3]);                }                // Take account of the special BFPO c/o format                $postcode = preg_replace('/C\/O/', 'c/o ', $postcode);                // Remember that we have found that the code is valid and break from loop                $valid = true;                break;              }            }            // Return with the reformatted valid postcode in uppercase if the postcode was             // valid            if ($valid) {              $toCheck = $postcode;              return true;            } else {              return false;            }    }}